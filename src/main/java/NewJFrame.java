import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Diana Paola
 */
public class NewJFrame extends javax.swing.JFrame {
    private static JFileChooser openFile;
    private static File input;
    private static File f;
    private static BufferedImage image;
    private static String fileName;
    private static String path;
    private static int width;
    private static int height;
    private static byte[] plainTextByte; 
    byte[] bytesAfterCipherMode;
    private static int optionCD = 0;
    private static int optionMode = 0;
    
    private static final int RGB_SIZE = 3;
    private static final int BSHIFT = 0xFF;
    AESCipher AESAlgorithm = new AESCipher();
    
    public NewJFrame() {
        initComponents();
    }
    
    public void createImageAfterModeCipher(byte[] bytesCipherMode, String modeOperation) throws IOException{
        // Re-create image with table-encrypted RGB values
        BufferedImage newImage = new BufferedImage(width, height,
                BufferedImage.TYPE_3BYTE_BGR);
                int index = 0;
                for (int i = 0; i < height; i++) {

                  for (int j = 0; j < width; j++) {

                    // Need to deal with values < 0 so binary AND with 0xFF
                    // Java 8 provides Byte.toUnsignedInt but I am from the old school ;-)
                    int r = bytesAfterCipherMode[index++] & BSHIFT;
                    int g = bytesAfterCipherMode[index++] & BSHIFT;
                    int b = bytesAfterCipherMode[index++] & BSHIFT;

                    Color newColor = new Color(r, g, b);
                    newImage.setRGB(j, i, newColor.getRGB());

                  }
                }
                // write the output image
                int dotIndex = fileName.lastIndexOf('.');
                  fileName = fileName.substring(0, dotIndex);
                String ruta = input.getParent();
                ruta += "\\" + fileName + modeOperation + ".bmp";
                File output = new File(ruta);
                ImageIO.write(newImage, "bmp", output);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelectFile = new javax.swing.JButton();
        jLabelNameImage = new javax.swing.JLabel();
        jLabelImage = new javax.swing.JLabel();
        jTextFieldLlave = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldVi = new javax.swing.JTextField();
        jComboBoxCD = new javax.swing.JComboBox<>();
        jComboBoxModeOperation = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonReady = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSelectFile.setText("Select file");
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        jLabelNameImage.setText("Image");

        jLabelImage.setText("jLabel1");

        jTextFieldLlave.setToolTipText("");

        jLabel1.setText("Llave (de 16 bits)");

        jLabel2.setText("Vector de inicialización");

        jTextFieldVi.setToolTipText("");

        jComboBoxCD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cifrar", "Descifrar" }));
        jComboBoxCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCDActionPerformed(evt);
            }
        });

        jComboBoxModeOperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ECB", "CBC", "CFB", "OFB" }));
        jComboBoxModeOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxModeOperationActionPerformed(evt);
            }
        });

        jLabel3.setText("Selecciona cifrado/descifrado");

        jLabel4.setText("Selecciona modo de operación");
        jLabel4.setToolTipText("");

        jButtonReady.setText("Cifrar / Descifrar");
        jButtonReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonSelectFile)
                                .addComponent(jLabel1)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldVi, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldLlave, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNameImage, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxModeOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                                .addComponent(jButtonReady)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSelectFile)
                            .addComponent(jLabelNameImage))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldLlave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldVi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxModeOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButtonReady)))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFileActionPerformed
                        
        try {
            openFile = new JFileChooser();
            int oF = openFile.showOpenDialog(null);
            
            if(oF == JFileChooser.APPROVE_OPTION){
                input = openFile.getSelectedFile();
                fileName = input.getName();
                path = input.getAbsolutePath();
                System.out.println("Name: " + fileName + ", path: " + path);

                image = ImageIO.read(input);
                width = image.getWidth();
                height = image.getHeight();

                plainTextByte = new byte[width * height * RGB_SIZE];
                int index = 0;

          // fill the table t with RGB values;
                int k=0;
                for (int i = 0; i < height; i++) {
                    for (int j = 0; j < width; j++) {
                        Color c = new Color(image.getRGB(j, i));
                        /*System.out.println("\n [" + k + "]: " +c.getRed() + " , " 
                                              + c.getGreen()  + " , " + c.getBlue() );*/
                        // As byte is SIGNED in Java overflow will occur for values > 127
                        byte r = (byte) c.getRed();
                        byte g = (byte) c.getGreen();
                        byte b = (byte) c.getBlue();

                        plainTextByte[index++] = r;
                        plainTextByte[index++] = g;
                        plainTextByte[index++] = b;
                        k++;
                    }
                }
                
            }
    } catch (Exception e) {
      e.printStackTrace();
    }
        
        
    }//GEN-LAST:event_jButtonSelectFileActionPerformed

    private void jComboBoxCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCDActionPerformed
        optionCD = jComboBoxCD.getSelectedIndex();
    }//GEN-LAST:event_jComboBoxCDActionPerformed

    private void jComboBoxModeOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxModeOperationActionPerformed
        optionMode = jComboBoxModeOperation.getSelectedIndex();
    }//GEN-LAST:event_jComboBoxModeOperationActionPerformed

    private void jButtonReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadyActionPerformed
        String claveEncriptation = jTextFieldLlave.getText();
        String vi = jTextFieldVi.getText();
        
        
        
        if(optionMode == 0){
            System.out.println("Mod ECB");
            try {
                if(optionCD == 0){
                    bytesAfterCipherMode = AESAlgorithm.encryptECB(plainTextByte, claveEncriptation);
                    createImageAfterModeCipher(bytesAfterCipherMode, "_eEBC");
                    System.out.println("Imagen cifrada con ECB");
                }else{
                    //bytesAfterCipherMode = AESAlgorithm.decryptECB(plainTextByte, claveEncriptation);
                    //createImageAfterModeCipher(bytesAfterCipherMode, "_dEBC");
                    System.out.println("Imagen descifrada con ECB");
                }
                
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(optionMode == 1){
            System.out.println("Mod CBC");
            try {
                if(optionCD == 0){
                    bytesAfterCipherMode = AESAlgorithm.encryptCBC(plainTextByte, claveEncriptation, vi);
                    createImageAfterModeCipher(bytesAfterCipherMode, "_eCBC");
                    System.out.println("Imagen cifrada con CBC");
                }else{
                    bytesAfterCipherMode = AESAlgorithm.decryptCBC(plainTextByte, claveEncriptation, vi);
                    createImageAfterModeCipher(bytesAfterCipherMode, "_dCBC");
                    System.out.println("Imagen descifrada con CBC");
                }
                
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(optionMode == 2){
            System.out.println("Mod CFB");
            try {
                if(optionCD == 0){
                    //bytesAfterCipherMode = AESAlgorithm.encryptCFB(plainTextByte, claveEncriptation, vi);
                    //createImageAfterModeCipher(bytesAfterCipherMode, "_eCFB");
                    System.out.println("Imagen cifrada con CFB");
                }else{
                    //bytesAfterCipherMode = AESAlgorithm.decryptCFB(plainTextByte, claveEncriptation, vi);
                    //createImageAfterModeCipher(bytesAfterCipherMode, "_dCFB");
                    System.out.println("Imagen descifrada con CFB");
                }
                
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(optionMode == 3){
            System.out.println("Mod OFB");
        }
    }//GEN-LAST:event_jButtonReadyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReady;
    private javax.swing.JButton jButtonSelectFile;
    private javax.swing.JComboBox<String> jComboBoxCD;
    private javax.swing.JComboBox<String> jComboBoxModeOperation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JLabel jLabelNameImage;
    private javax.swing.JTextField jTextFieldLlave;
    private javax.swing.JTextField jTextFieldVi;
    // End of variables declaration//GEN-END:variables
}
